{"componentChunkName":"component---src-templates-blog-post-js","path":"/webpack-core-concepts/","result":{"data":{"site":{"siteMetadata":{"title":"My Blog"}},"markdownRemark":{"id":"0d595036-590e-50c0-86ca-9fd091bf3a83","excerpt":"Webpack is a module bundler that allows developers to write in any module format and compiles them into a artifacts that can be used in a browser.\nWebpack…","html":"<p>Webpack is a module bundler that allows developers to write in any module format and compiles them into a artifacts that can be used in a browser.\nWebpack supports static async bundling (code splitting) helps to optimize the code at build time for high performance.</p>\n<p>Github Link: <a href=\"https://github.com/webpack/webpack\">https://github.com/webpack/webpack</a></p>\n<p><a href=\"https://webpack.js.org/\">https://webpack.js.org/</a></p>\n<p>Before explaining the core concepts, it’s important to understand how webpack can be used.\nThere are 3 ways to use webpack</p>\n<ol>\n<li>Webpack Config (webpack.config.js)\nThe config file is a CommonJS module.</li>\n<li>Webpack CLI.\n<code class=\"language-text\">webpack &lt;entry.js&gt; &lt;output.js&gt; --colors --progress</code>\n<code class=\"language-text\">webpack-dev-server --port=9000</code></li>\n<li>\n<p>Node API</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    var webpack = require(&quot;webpack&quot;);\n\n    webpack({\n        //configuration object\n    }, function(error, status){\n        //compiler callbacks\n    })</code></pre></div>\n</li>\n</ol>\n<p>Here are the 4 core concepts in webpack.</p>\n<ol>\n<li>\n<p>Entry.\nThis is the top level application file, from which weback creates the source map.\nYour application file may import other components such as other modules, sass, css, images.\nWebpack trace through them and create a source map.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    module.exports = {\n        entry: &#39;./index.js&#39;, //relative path\n    }</code></pre></div>\n</li>\n<li>\n<p>Output.\nThis object tells webpack how to distribute the files after compilation.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    module.exports = {\n        entry: &#39;./index.js&#39;, //relative path\n        output: { //compilations, how to distribute\n            path: &#39;./dist&#39;,\n            filename: &#39;./bundle.js&#39;\n        }\n    }</code></pre></div>\n</li>\n<li>\n<p>Loaders.\nTells webpack how to modify files before its added to dependency graph.\nLoaders are also JS modules(functions) that takes the source files and returns it in a [modified] state\nTells webpack how to interpret and tranlate files. per fiile basis.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    module: {\n    rules: [\n    {test: /\\.ts\\$/, use: &#39;ts-loader&#39;}, //matches the regex - which file to run the loader against\n\n            {test: /\\.js$/, use: &#39;babel-loader&#39;},\n\n            {\n                test: /\\.css$/, use: &#39;css-loader&#39;,\n                use: (Array|String|Function), // that returns loader objects\n                include: RegExp[],\n                exclude: RegExp[], //ignore file .. say for eg: spec files in prod build\n                issuer: (RegExp| String)[],\n                enforce: &quot;pre&quot;|&quot;post&quot; // tells webpack when to run the rule, before or after all othe rules\n                oneof or anyof to ensure only one gets applied, by default all rules are matched\n            }\n            {\n                test: /\\.css$/, use: &#39;css-loader&#39;,\n                use: [&#39;style&#39;,&#39;css&#39;,&#39;less&#39;]  //chaining loaders. read it like style(css(less())), which means executed from right to left\n            }\n\n        ],\n    }</code></pre></div>\n</li>\n<li>Plugins</li>\n</ol>\n<p>A plugin is an instance(ES5 class) or object with <code class=\"language-text\">apply</code> property.\nIt allows you to hook into the entire compilation lifecycle\nWebpack has a varitey of built in plugins.\nCompiler emit events and plugins are used to add additional functionality to compilations(optimized bundled modules),\nwhich loaders can’t do.\nPlugns are the powerful feature of webpack with access to Compiler API. It does everything else you’d ever want to in webpack.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">        function BellOnBundlerErrorPlugin(){}\n        BellOnBundlerErrorPlugin.prototype.apply = function(compiler){\n            if(typeof(process) !== &#39;undefined&#39;){\n                compiler.plugin(&#39;done&#39;, function(stats){\n                    if(stats.hasErrors()){\n                        process.stderr.write(&#39;\\x07&#39;);\n                    }\n                });\n                compiler.plugin(&#39;failed&#39;, function(err){\n                    process.stderr.write(&#39;\\x07&#39;);\n                });\n            }\n        }\n        module.exports = BellOnBundlerErrorPlugin;\n\n         //require() from node_modules or webpack or local file\n         var BellOnBundlerErrorPlugin = require(&#39;bell-on-error&#39;)\n         var webpack = require(&#39;webpack&#39;);\n\n         module.exports = {\n             plugins: [\n                new BellOnBundlerErrorPlugin(), //add new instance of the plugin into plugins key in config object\n                                                // provide additional info for arguments\n                new webpack.optimize.CommonsChunkPlugin(&#39;vendors&#39;)\n             ]\n         }</code></pre></div>\n<p>Webpack follows an event driven architecture and by itself is build using plugins</p>","frontmatter":{"title":"Webpack Core Concepts","date":"May 02, 2020","description":"Webpack Core Concepts"}}},"pageContext":{"slug":"/webpack-core-concepts/","previous":{"fields":{"slug":"/using-jenv/"},"frontmatter":{"title":"Using Jenv"}},"next":null}}}