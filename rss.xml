<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[My Blog]]></title><description><![CDATA[My Blog.]]></description><link>https://arunapi.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 19 May 2020 00:21:42 GMT</lastBuildDate><item><title><![CDATA[Webpack Core Concepts]]></title><description><![CDATA[Webpack is a module bundler that allows developers to write in any module format and compiles them into a artifacts that can be used in a…]]></description><link>https://arunapi.github.io/webpack-core-concepts/</link><guid isPermaLink="false">https://arunapi.github.io/webpack-core-concepts/</guid><pubDate>Sat, 02 May 2020 07:20:03 GMT</pubDate><content:encoded>&lt;p&gt;Webpack is a module bundler that allows developers to write in any module format and compiles them into a artifacts that can be used in a browser.
Webpack supports static async bundling (code splitting) helps to optimize the code at build time for high performance.&lt;/p&gt;
&lt;p&gt;Github Link: &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;https://github.com/webpack/webpack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot;&gt;https://webpack.js.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before explaining the core concepts, it’s important to understand how webpack can be used.
There are 3 ways to use webpack&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Webpack Config (webpack.config.js)
The config file is a CommonJS module.&lt;/li&gt;
&lt;li&gt;Webpack CLI.
&lt;code class=&quot;language-text&quot;&gt;webpack &amp;lt;entry.js&amp;gt; &amp;lt;output.js&amp;gt; --colors --progress&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;webpack-dev-server --port=9000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node API&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    var webpack = require(&amp;quot;webpack&amp;quot;);

    webpack({
        //configuration object
    }, function(error, status){
        //compiler callbacks
    })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the 4 core concepts in webpack.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Entry.
This is the top level application file, from which weback creates the source map.
Your application file may import other components such as other modules, sass, css, images.
Webpack trace through them and create a source map.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    module.exports = {
        entry: &amp;#39;./index.js&amp;#39;, //relative path
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Output.
This object tells webpack how to distribute the files after compilation.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    module.exports = {
        entry: &amp;#39;./index.js&amp;#39;, //relative path
        output: { //compilations, how to distribute
            path: &amp;#39;./dist&amp;#39;,
            filename: &amp;#39;./bundle.js&amp;#39;
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loaders.
Tells webpack how to modify files before its added to dependency graph.
Loaders are also JS modules(functions) that takes the source files and returns it in a [modified] state
Tells webpack how to interpret and tranlate files. per fiile basis.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    module: {
    rules: [
    {test: /\.ts\$/, use: &amp;#39;ts-loader&amp;#39;}, //matches the regex - which file to run the loader against

            {test: /\.js$/, use: &amp;#39;babel-loader&amp;#39;},

            {
                test: /\.css$/, use: &amp;#39;css-loader&amp;#39;,
                use: (Array|String|Function), // that returns loader objects
                include: RegExp[],
                exclude: RegExp[], //ignore file .. say for eg: spec files in prod build
                issuer: (RegExp| String)[],
                enforce: &amp;quot;pre&amp;quot;|&amp;quot;post&amp;quot; // tells webpack when to run the rule, before or after all othe rules
                oneof or anyof to ensure only one gets applied, by default all rules are matched
            }
            {
                test: /\.css$/, use: &amp;#39;css-loader&amp;#39;,
                use: [&amp;#39;style&amp;#39;,&amp;#39;css&amp;#39;,&amp;#39;less&amp;#39;]  //chaining loaders. read it like style(css(less())), which means executed from right to left
            }

        ],
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A plugin is an instance(ES5 class) or object with &lt;code class=&quot;language-text&quot;&gt;apply&lt;/code&gt; property.
It allows you to hook into the entire compilation lifecycle
Webpack has a varitey of built in plugins.
Compiler emit events and plugins are used to add additional functionality to compilations(optimized bundled modules),
which loaders can’t do.
Plugns are the powerful feature of webpack with access to Compiler API. It does everything else you’d ever want to in webpack.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;        function BellOnBundlerErrorPlugin(){}
        BellOnBundlerErrorPlugin.prototype.apply = function(compiler){
            if(typeof(process) !== &amp;#39;undefined&amp;#39;){
                compiler.plugin(&amp;#39;done&amp;#39;, function(stats){
                    if(stats.hasErrors()){
                        process.stderr.write(&amp;#39;\x07&amp;#39;);
                    }
                });
                compiler.plugin(&amp;#39;failed&amp;#39;, function(err){
                    process.stderr.write(&amp;#39;\x07&amp;#39;);
                });
            }
        }
        module.exports = BellOnBundlerErrorPlugin;

         //require() from node_modules or webpack or local file
         var BellOnBundlerErrorPlugin = require(&amp;#39;bell-on-error&amp;#39;)
         var webpack = require(&amp;#39;webpack&amp;#39;);

         module.exports = {
             plugins: [
                new BellOnBundlerErrorPlugin(), //add new instance of the plugin into plugins key in config object
                                                // provide additional info for arguments
                new webpack.optimize.CommonsChunkPlugin(&amp;#39;vendors&amp;#39;)
             ]
         }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Webpack follows an event driven architecture and by itself is build using plugins&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using Jenv]]></title><description><![CDATA[Jenv is a command line tool, which you can use to conviniently switch between various version of java. I have used this to check if my Java…]]></description><link>https://arunapi.github.io/google-cloud-platform/</link><guid isPermaLink="false">https://arunapi.github.io/google-cloud-platform/</guid><pubDate>Mon, 06 Apr 2020 19:46:03 GMT</pubDate><content:encoded>&lt;p&gt;Jenv is a command line tool, which you can use to conviniently switch between various version of java. I have used this to check if my Java 8 code base will it work on Java 11.&lt;/p&gt;
&lt;p&gt;Basic installation steps are provided [here] &lt;a href=&quot;https://www.jenv.be/&quot;&gt;https://www.jenv.be/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Checkout the additional configurations here &lt;a href=&quot;https://github.com/jenv/jenv&quot;&gt;https://github.com/jenv/jenv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At a high level these are the steps to follow.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;git clone https://github.com/gcuisinier/jenv.git ~/.jenv&lt;/code&gt; to install &lt;a href=&quot;http://www.jenv.be/&quot;&gt;jenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;echo &amp;#39;export PATH=&amp;quot;$HOME/.jenv/bin:$PATH&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt; to add the jenv bin dir to your path.&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;echo &amp;#39;eval &amp;quot;$(jenv init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt; to initialize jenv on startup&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;mkdir -p ~/.jenv/versions&lt;/code&gt; to create jenv’s home dirs (since it doesn’t do it automatically)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;jenv add /Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home&lt;/code&gt; to add the JDK you installed earlier to jenv&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This might not be the &lt;em&gt;exact&lt;/em&gt; path of your JDK.&lt;/li&gt;
&lt;li&gt;You can use autocomplete to get to the correct dir&lt;/li&gt;
&lt;li&gt;Just start with &lt;code class=&quot;language-text&quot;&gt;/Library/Java/JavaVirtualMachines&lt;/code&gt; and start tabbing&lt;/li&gt;
&lt;li&gt;Make sure your dir ends with &lt;code class=&quot;language-text&quot;&gt;Contents/Home&lt;/code&gt; if you are on Mac OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;jenv global openjdk-11.0.2.jdk&lt;/code&gt; to configure your global jdk version&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Might not be the exact version. Check the output of your &lt;code class=&quot;language-text&quot;&gt;jenv versions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;jenv enable-plugin export&lt;/code&gt; to allow jenv to set your $JAVA_HOME, then create a new terminal session&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you recieve a plugin error, use the command &lt;code class=&quot;language-text&quot;&gt;source ~/.bash_profile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Using Jenv]]></title><description><![CDATA[Jenv is a command line tool, which you can use to conviniently switch between various version of java. I have used this to check if my Java…]]></description><link>https://arunapi.github.io/using-jenv/</link><guid isPermaLink="false">https://arunapi.github.io/using-jenv/</guid><pubDate>Mon, 06 Apr 2020 19:46:03 GMT</pubDate><content:encoded>&lt;p&gt;Jenv is a command line tool, which you can use to conviniently switch between various version of java. I have used this to check if my Java 8 code base will it work on Java 11.&lt;/p&gt;
&lt;p&gt;Basic installation steps are provided [here] &lt;a href=&quot;https://www.jenv.be/&quot;&gt;https://www.jenv.be/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Checkout the additional configurations here &lt;a href=&quot;https://github.com/jenv/jenv&quot;&gt;https://github.com/jenv/jenv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At a high level these are the steps to follow to setup for the first time. If you already have it setup jump to switching versions section.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;git clone https://github.com/gcuisinier/jenv.git ~/.jenv&lt;/code&gt; to install &lt;a href=&quot;http://www.jenv.be/&quot;&gt;jenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;echo &amp;#39;export PATH=&amp;quot;$HOME/.jenv/bin:$PATH&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt; to add the jenv bin dir to your path.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In linux &lt;code class=&quot;language-text&quot;&gt;echo &amp;#39;PATH=&amp;quot;$HOME/.jenv/bin:$PATH&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;echo &amp;#39;eval &amp;quot;$(jenv init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt; to initialize jenv on startup&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;mkdir -p ~/.jenv/versions&lt;/code&gt; to create jenv’s home dirs (since it doesn’t do it automatically)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;jenv add &amp;lt;path-to-jdk&amp;gt;&lt;/code&gt; to add the JDK you installed earlier to jenv.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; See which version is currently being used in the shell &lt;code class=&quot;language-text&quot;&gt;java -version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To locate the executable &lt;code class=&quot;language-text&quot;&gt;which java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To find the actual path &lt;code class=&quot;language-text&quot;&gt;readlink -f &amp;lt;executable path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In mac os &lt;code class=&quot;language-text&quot;&gt;jenv add /Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home&lt;/code&gt;
This might not be the &lt;em&gt;exact&lt;/em&gt; path of your JDK.&lt;/li&gt;
&lt;li&gt;You can use autocomplete to get to the correct dir&lt;/li&gt;
&lt;li&gt;Just start with &lt;code class=&quot;language-text&quot;&gt;/Library/Java/JavaVirtualMachines&lt;/code&gt; and start tabbing&lt;/li&gt;
&lt;li&gt;Make sure your dir ends with &lt;code class=&quot;language-text&quot;&gt;Contents/Home&lt;/code&gt; if you are on Mac OS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In linux &lt;code class=&quot;language-text&quot;&gt;jenv add /usr/lib/jvm/java-11-openjdk-amd64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you recieve an error, use the command &lt;code class=&quot;language-text&quot;&gt;source ~/.bash_profile&lt;/code&gt; or close the shell and open again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;jenv global openjdk-11.0.2.jdk&lt;/code&gt; to configure your global jdk version&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Might not be the exact version. Check the output of your &lt;code class=&quot;language-text&quot;&gt;jenv versions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;jenv enable-plugin export&lt;/code&gt; to allow jenv to set your $JAVA_HOME, then create a new terminal session&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Adding new version of Java&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download the java tarball from &lt;a href=&quot;https://jdk.java.net/archive&quot;&gt;https://jdk.java.net/archive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Untar the file and move it to desired location.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code class=&quot;language-text&quot;&gt;jenv add &amp;lt;location&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In linux, download and extract JDK 14.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;curl https://download.java.net/java/GA/jdk14/076bab302c7b4508975440c56f6cc26a/36/GPL/openjdk-14_linux-x64_bin.tar.gz | sudo tar -xzvf - --directory /usr/lib/jvm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add to jenv &lt;code class=&quot;language-text&quot;&gt;jenv add /usr/lib/jvm/jdk-14&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Switching between versions in shell&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;jenv versions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;jenv shell &amp;lt;desired version&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;java -version&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Other tips&lt;/h2&gt;
&lt;p&gt;See which version is currently being used in the shell &lt;code class=&quot;language-text&quot;&gt;java -version&lt;/code&gt;
To locate the executable &lt;code class=&quot;language-text&quot;&gt;which java&lt;/code&gt;
To find the actual path &lt;code class=&quot;language-text&quot;&gt;readlink -f &amp;lt;executable path&amp;gt;&lt;/code&gt;
If you are using java set by jenv, to locate executable run &lt;code class=&quot;language-text&quot;&gt;jenv which java&lt;/code&gt;.
Use this path in the readlink command to find jdk installation location.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Frequently used docker commands]]></title><description><![CDATA[Here are the list of docker commands that will be handy.]]></description><link>https://arunapi.github.io/docker-commands/</link><guid isPermaLink="false">https://arunapi.github.io/docker-commands/</guid><pubDate>Sun, 29 Mar 2020 01:35:03 GMT</pubDate><content:encoded>&lt;p&gt;Here are the list of docker commands that will be handy.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using Docker for Java Programs]]></title><description><![CDATA[Many times you want to quickly test out a java code in a particular version of Java.
One fine way of doing it in local is using jenv. But…]]></description><link>https://arunapi.github.io/using-docker-to-test-java/</link><guid isPermaLink="false">https://arunapi.github.io/using-docker-to-test-java/</guid><pubDate>Sun, 29 Mar 2020 01:35:03 GMT</pubDate><content:encoded>&lt;p&gt;Many times you want to quickly test out a java code in a particular version of Java.
One fine way of doing it in local is using jenv. But still you are testing from your operating system. How will I test for a different OS. I use docker to accompilsh this.&lt;/p&gt;
&lt;p&gt;Here is a simple example.&lt;/p&gt;
&lt;p&gt;mkdir my-java-app&lt;/p&gt;
&lt;p&gt;Sample.java&lt;/p&gt;
&lt;p&gt;Dockerfile&lt;/p&gt;</content:encoded></item></channel></rss>